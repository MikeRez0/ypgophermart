// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	domain "github.com/MikeRez0/ypgophermart/internal/core/domain"
	port "github.com/MikeRez0/ypgophermart/internal/core/port"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockRepository) CreateOrder(ctx context.Context, order *domain.Order) (*domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, order)
	ret0, _ := ret[0].(*domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockRepositoryMockRecorder) CreateOrder(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockRepository)(nil).CreateOrder), ctx, order)
}

// CreateUser mocks base method.
func (m *MockRepository) CreateUser(ctx context.Context, user *domain.User) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockRepositoryMockRecorder) CreateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockRepository)(nil).CreateUser), ctx, user)
}

// GetUserByLogin mocks base method.
func (m *MockRepository) GetUserByLogin(ctx context.Context, login string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByLogin", ctx, login)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByLogin indicates an expected call of GetUserByLogin.
func (mr *MockRepositoryMockRecorder) GetUserByLogin(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByLogin", reflect.TypeOf((*MockRepository)(nil).GetUserByLogin), ctx, login)
}

// ListOrdersByStatus mocks base method.
func (m *MockRepository) ListOrdersByStatus(ctx context.Context, status domain.OrderStatus) ([]*domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrdersByStatus", ctx, status)
	ret0, _ := ret[0].([]*domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrdersByStatus indicates an expected call of ListOrdersByStatus.
func (mr *MockRepositoryMockRecorder) ListOrdersByStatus(ctx, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrdersByStatus", reflect.TypeOf((*MockRepository)(nil).ListOrdersByStatus), ctx, status)
}

// ListOrdersByUser mocks base method.
func (m *MockRepository) ListOrdersByUser(ctx context.Context, userID uint64) ([]*domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrdersByUser", ctx, userID)
	ret0, _ := ret[0].([]*domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrdersByUser indicates an expected call of ListOrdersByUser.
func (mr *MockRepositoryMockRecorder) ListOrdersByUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrdersByUser", reflect.TypeOf((*MockRepository)(nil).ListOrdersByUser), ctx, userID)
}

// ReadBalanceByUserID mocks base method.
func (m *MockRepository) ReadBalanceByUserID(ctx context.Context, userID uint64) (*domain.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadBalanceByUserID", ctx, userID)
	ret0, _ := ret[0].(*domain.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadBalanceByUserID indicates an expected call of ReadBalanceByUserID.
func (mr *MockRepositoryMockRecorder) ReadBalanceByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadBalanceByUserID", reflect.TypeOf((*MockRepository)(nil).ReadBalanceByUserID), ctx, userID)
}

// ReadOrder mocks base method.
func (m *MockRepository) ReadOrder(ctx context.Context, orderID domain.OrderNumber) (*domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadOrder", ctx, orderID)
	ret0, _ := ret[0].(*domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadOrder indicates an expected call of ReadOrder.
func (mr *MockRepositoryMockRecorder) ReadOrder(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadOrder", reflect.TypeOf((*MockRepository)(nil).ReadOrder), ctx, orderID)
}

// UpdateOrder mocks base method.
func (m *MockRepository) UpdateOrder(ctx context.Context, order *domain.Order) (*domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", ctx, order)
	ret0, _ := ret[0].(*domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockRepositoryMockRecorder) UpdateOrder(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockRepository)(nil).UpdateOrder), ctx, order)
}

// UpdateUserBalanceByOrder mocks base method.
func (m *MockRepository) UpdateUserBalanceByOrder(ctx context.Context, userID uint64, orderNumber domain.OrderNumber, updateFn port.UpdateBalanceFn) (*domain.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserBalanceByOrder", ctx, userID, orderNumber, updateFn)
	ret0, _ := ret[0].(*domain.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserBalanceByOrder indicates an expected call of UpdateUserBalanceByOrder.
func (mr *MockRepositoryMockRecorder) UpdateUserBalanceByOrder(ctx, userID, orderNumber, updateFn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserBalanceByOrder", reflect.TypeOf((*MockRepository)(nil).UpdateUserBalanceByOrder), ctx, userID, orderNumber, updateFn)
}
