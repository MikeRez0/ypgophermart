// Code generated by MockGen. DO NOT EDIT.
// Source: accrual.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	domain "github.com/MikeRez0/ypgophermart/internal/core/domain"
	gomock "github.com/golang/mock/gomock"
	decimal "github.com/govalues/decimal"
)

// MockAccrualServiceClient is a mock of AccrualServiceClient interface.
type MockAccrualServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockAccrualServiceClientMockRecorder
}

// MockAccrualServiceClientMockRecorder is the mock recorder for MockAccrualServiceClient.
type MockAccrualServiceClientMockRecorder struct {
	mock *MockAccrualServiceClient
}

// NewMockAccrualServiceClient creates a new mock instance.
func NewMockAccrualServiceClient(ctrl *gomock.Controller) *MockAccrualServiceClient {
	mock := &MockAccrualServiceClient{ctrl: ctrl}
	mock.recorder = &MockAccrualServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccrualServiceClient) EXPECT() *MockAccrualServiceClientMockRecorder {
	return m.recorder
}

// ScheduleOrderAccrual mocks base method.
func (m *MockAccrualServiceClient) ScheduleOrderAccrual(orderNumber domain.OrderNumber) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ScheduleOrderAccrual", orderNumber)
}

// ScheduleOrderAccrual indicates an expected call of ScheduleOrderAccrual.
func (mr *MockAccrualServiceClientMockRecorder) ScheduleOrderAccrual(orderNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleOrderAccrual", reflect.TypeOf((*MockAccrualServiceClient)(nil).ScheduleOrderAccrual), orderNumber)
}

// MockOrderAccrualUpdater is a mock of OrderAccrualUpdater interface.
type MockOrderAccrualUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockOrderAccrualUpdaterMockRecorder
}

// MockOrderAccrualUpdaterMockRecorder is the mock recorder for MockOrderAccrualUpdater.
type MockOrderAccrualUpdaterMockRecorder struct {
	mock *MockOrderAccrualUpdater
}

// NewMockOrderAccrualUpdater creates a new mock instance.
func NewMockOrderAccrualUpdater(ctrl *gomock.Controller) *MockOrderAccrualUpdater {
	mock := &MockOrderAccrualUpdater{ctrl: ctrl}
	mock.recorder = &MockOrderAccrualUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderAccrualUpdater) EXPECT() *MockOrderAccrualUpdaterMockRecorder {
	return m.recorder
}

// AccrualOrder mocks base method.
func (m *MockOrderAccrualUpdater) AccrualOrder(ctx context.Context, orderNumber domain.OrderNumber, amount decimal.Decimal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccrualOrder", ctx, orderNumber, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// AccrualOrder indicates an expected call of AccrualOrder.
func (mr *MockOrderAccrualUpdaterMockRecorder) AccrualOrder(ctx, orderNumber, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccrualOrder", reflect.TypeOf((*MockOrderAccrualUpdater)(nil).AccrualOrder), ctx, orderNumber, amount)
}

// UpdateOrderStatus mocks base method.
func (m *MockOrderAccrualUpdater) UpdateOrderStatus(ctx context.Context, orderNumber domain.OrderNumber, status domain.OrderStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderStatus", ctx, orderNumber, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderStatus indicates an expected call of UpdateOrderStatus.
func (mr *MockOrderAccrualUpdaterMockRecorder) UpdateOrderStatus(ctx, orderNumber, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderStatus", reflect.TypeOf((*MockOrderAccrualUpdater)(nil).UpdateOrderStatus), ctx, orderNumber, status)
}
