{
  "Issues": [
    {
      "FromLinter": "gocritic",
      "Text": "importShadow: shadow of imported from 'github.com/MikeRez0/ypgophermart/internal/adapter/client/accrual' package 'accrual'",
      "Severity": "error",
      "SourceLines": [
        "\taccrual, err := accrual.NewAccrualClient(conf.Accrual, log.Named(\"Accrual\"))"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "cmd/gophermart/main.go",
        "Offset": 1403,
        "Line": 61,
        "Column": 2
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "whitespace",
      "Text": "unnecessary leading newline",
      "Severity": "error",
      "SourceLines": [
        ""
      ],
      "Replacement": {
        "NeedOnlyDelete": true,
        "NewLines": null,
        "Inline": null
      },
      "LineRange": {
        "From": 18,
        "To": 18
      },
      "Pos": {
        "Filename": "internal/adapter/auth/paseto.go",
        "Offset": 319,
        "Line": 17,
        "Column": 40
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "govet",
      "Text": "fieldalignment: struct with 32 pointer bytes could be 24",
      "Severity": "error",
      "SourceLines": [
        "type AccrualClient struct {"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/adapter/client/accrual/accrual.go",
        "Offset": 345,
        "Line": 19,
        "Column": 20
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "govet",
      "Text": "fieldalignment: struct with 32 pointer bytes could be 24",
      "Severity": "error",
      "SourceLines": [
        "type accrualResponse struct {"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/adapter/client/accrual/accrual.go",
        "Offset": 675,
        "Line": 33,
        "Column": 22
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "errname",
      "Text": "the error type name `errAccrualRequest` should conform to the `xxxError` format",
      "Severity": "error",
      "SourceLines": [
        "type errAccrualRequest struct {"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/adapter/client/accrual/accrual.go",
        "Offset": 791,
        "Line": 39,
        "Column": 6
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "unused",
      "Text": "field `error` is unused",
      "Severity": "error",
      "SourceLines": [
        "\terror"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/adapter/client/accrual/accrual.go",
        "Offset": 819,
        "Line": 40,
        "Column": 2
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "goconst",
      "Text": "string `order` has 13 occurrences, make it a constant",
      "Severity": "error",
      "SourceLines": [
        "\tc.logger.Debug(\"> put order in queue (schedule)\", zap.String(\"order\", string(orderNumber)))"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/adapter/client/accrual/accrual.go",
        "Offset": 1249,
        "Line": 56,
        "Column": 63
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "errorlint",
      "Text": "type assertion on error will fail on wrapped errors. Use errors.As to check for specific errors",
      "Severity": "error",
      "SourceLines": [
        "\t\t\t\t\t\tif e, ok := err.(*errAccrualRequest); ok {"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/adapter/client/accrual/accrual.go",
        "Offset": 1943,
        "Line": 78,
        "Column": 19
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "whitespace",
      "Text": "unnecessary trailing newline",
      "Severity": "error",
      "SourceLines": [
        ""
      ],
      "Replacement": {
        "NeedOnlyDelete": true,
        "NewLines": null,
        "Inline": null
      },
      "LineRange": {
        "From": 140,
        "To": 140
      },
      "Pos": {
        "Filename": "internal/adapter/client/accrual/accrual.go",
        "Offset": 3993,
        "Line": 141,
        "Column": 1
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "durationcheck",
      "Text": "Multiplication of durations: `retryAfter * time.Second`",
      "Severity": "error",
      "SourceLines": [
        "\t\t\treturn nil, &errAccrualRequest{RetryAfter: retryAfter * time.Second, NeedSleep: true}"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/adapter/client/accrual/accrual.go",
        "Offset": 4969,
        "Line": 168,
        "Column": 47
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "wrapcheck",
      "Text": "error returned from interface method should be wrapped: sig: func (github.com/MikeRez0/ypgophermart/internal/core/port.OrderAccrualUpdater).AccrualOrder(ctx context.Context, orderNumber github.com/MikeRez0/ypgophermart/internal/core/domain.OrderNumber, amount github.com/govalues/decimal.Decimal) error",
      "Severity": "error",
      "SourceLines": [
        "\t\t\treturn true, err"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/adapter/client/accrual/accrual.go",
        "Offset": 6189,
        "Line": 201,
        "Column": 17
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "wrapcheck",
      "Text": "error returned from interface method should be wrapped: sig: func (github.com/MikeRez0/ypgophermart/internal/core/port.OrderAccrualUpdater).UpdateOrderStatus(ctx context.Context, orderNumber github.com/MikeRez0/ypgophermart/internal/core/domain.OrderNumber, status github.com/MikeRez0/ypgophermart/internal/core/domain.OrderStatus) error",
      "Severity": "error",
      "SourceLines": [
        "\t\treturn false, orderAccrualUpdater.UpdateOrderStatus(ctx, status.OrderNumber, domain.OrderStatusInvalid)"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/adapter/client/accrual/accrual.go",
        "Offset": 6270,
        "Line": 207,
        "Column": 17
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "wrapcheck",
      "Text": "error returned from interface method should be wrapped: sig: func (github.com/MikeRez0/ypgophermart/internal/core/port.OrderAccrualUpdater).UpdateOrderStatus(ctx context.Context, orderNumber github.com/MikeRez0/ypgophermart/internal/core/domain.OrderNumber, status github.com/MikeRez0/ypgophermart/internal/core/domain.OrderStatus) error",
      "Severity": "error",
      "SourceLines": [
        "\t\treturn true, orderAccrualUpdater.UpdateOrderStatus(ctx, status.OrderNumber, domain.OrderStatusProcessing)"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/adapter/client/accrual/accrual.go",
        "Offset": 6385,
        "Line": 209,
        "Column": 16
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "govet",
      "Text": "fieldalignment: struct with 56 pointer bytes could be 32",
      "Severity": "error",
      "SourceLines": [
        "type withdrawalResponse struct {"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/adapter/handler/http/balance.go",
        "Offset": 1850,
        "Line": 84,
        "Column": 25
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "godot",
      "Text": "Comment should end in a period",
      "Severity": "error",
      "SourceLines": [
        "// handleValidationError sends an error response for some specific request validation error"
      ],
      "Replacement": {
        "NeedOnlyDelete": false,
        "NewLines": [
          "// handleValidationError sends an error response for some specific request validation error."
        ],
        "Inline": null
      },
      "Pos": {
        "Filename": "internal/adapter/handler/http/handler.go",
        "Offset": 1626,
        "Line": 52,
        "Column": 92
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "errcheck",
      "Text": "Error return value of `ctx.AbortWithError` is not checked",
      "Severity": "error",
      "SourceLines": [
        "\tctx.AbortWithError(http.StatusBadRequest, err)"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/adapter/handler/http/handler.go",
        "Offset": 1808,
        "Line": 54,
        "Column": 20
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "godot",
      "Text": "Comment should end in a period",
      "Severity": "error",
      "SourceLines": [
        "// handleAbort sends an error response and aborts the request with the specified status code and error message"
      ],
      "Replacement": {
        "NeedOnlyDelete": false,
        "NewLines": [
          "// handleAbort sends an error response and aborts the request with the specified status code and error message."
        ],
        "Inline": null
      },
      "Pos": {
        "Filename": "internal/adapter/handler/http/handler.go",
        "Offset": 1840,
        "Line": 57,
        "Column": 111
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "errcheck",
      "Text": "Error return value of `ctx.AbortWithError` is not checked",
      "Severity": "error",
      "SourceLines": [
        "\tctx.AbortWithError(statusCode, err)"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/adapter/handler/http/handler.go",
        "Offset": 2182,
        "Line": 64,
        "Column": 20
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "godot",
      "Text": "Comment should end in a period",
      "Severity": "error",
      "SourceLines": [
        "// handleSuccess sends a success response with the specified status code and optional data"
      ],
      "Replacement": {
        "NeedOnlyDelete": false,
        "NewLines": [
          "// handleSuccess sends a success response with the specified status code and optional data."
        ],
        "Inline": null
      },
      "Pos": {
        "Filename": "internal/adapter/handler/http/handler.go",
        "Offset": 2450,
        "Line": 76,
        "Column": 91
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "errcheck",
      "Text": "Error return value is not checked",
      "Severity": "error",
      "SourceLines": [
        "\treturn ctx.MustGet(userPayloadKey).(*port.TokenPayload)"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/adapter/handler/http/middleware.go",
        "Offset": 1160,
        "Line": 49,
        "Column": 9
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "errcheck",
      "Text": "Error return value of `ctx.Request.Body.Close` is not checked",
      "Severity": "error",
      "SourceLines": [
        "\tdefer ctx.Request.Body.Close()"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/adapter/handler/http/order.go",
        "Offset": 756,
        "Line": 36,
        "Column": 30
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "govet",
      "Text": "fieldalignment: struct with 64 pointer bytes could be 56",
      "Severity": "error",
      "SourceLines": [
        "type OrderResp struct {"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/adapter/handler/http/order.go",
        "Offset": 1044,
        "Line": 50,
        "Column": 16
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "godot",
      "Text": "Comment should end in a period",
      "Severity": "error",
      "SourceLines": [
        "// Serve starts the HTTP server"
      ],
      "Replacement": {
        "NeedOnlyDelete": false,
        "NewLines": [
          "// Serve starts the HTTP server."
        ],
        "Inline": null
      },
      "Pos": {
        "Filename": "internal/adapter/handler/http/router.go",
        "Offset": 1232,
        "Line": 57,
        "Column": 32
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "wrapcheck",
      "Text": "error returned from external package is unwrapped: sig: func (*github.com/gin-gonic/gin.Engine).Run(addr ...string) (err error)",
      "Severity": "error",
      "SourceLines": [
        "\treturn r.Run(listenAddr)"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/adapter/handler/http/router.go",
        "Offset": 1322,
        "Line": 59,
        "Column": 9
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "whitespace",
      "Text": "unnecessary trailing newline",
      "Severity": "error",
      "SourceLines": [
        ""
      ],
      "Replacement": {
        "NeedOnlyDelete": true,
        "NewLines": null,
        "Inline": null
      },
      "LineRange": {
        "From": 31,
        "To": 31
      },
      "Pos": {
        "Filename": "internal/adapter/logger/logger.go",
        "Offset": 655,
        "Line": 32,
        "Column": 1
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "govet",
      "Text": "fieldalignment: struct with 32 pointer bytes could be 24",
      "Severity": "error",
      "SourceLines": [
        "type DB struct {"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/adapter/storage/db.go",
        "Offset": 357,
        "Line": 17,
        "Column": 9
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "gocritic",
      "Text": "importShadow: shadow of imported from 'github.com/MikeRez0/ypgophermart/internal/adapter/config' package 'config'",
      "Severity": "error",
      "SourceLines": [
        "func NewDBStorage(ctx context.Context, config *config.Database) (*DB, error) {"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/adapter/storage/db.go",
        "Offset": 545,
        "Line": 26,
        "Column": 40
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "goconst",
      "Text": "string `orders` has 4 occurrences, make it a constant",
      "Severity": "error",
      "SourceLines": [
        "\tstatement := or.db.QueryBuilder.Insert(\"orders\")."
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/adapter/storage/repository/postgres.go",
        "Offset": 905,
        "Line": 31,
        "Column": 41
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "goconst",
      "Text": "string `status` has 4 occurrences, make it a constant",
      "Severity": "error",
      "SourceLines": [
        "\t\tColumns(\"user_id\", \"number\", \"accrual\", \"withdrawal\", \"status\", \"uploaded_at\")."
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/adapter/storage/repository/postgres.go",
        "Offset": 972,
        "Line": 32,
        "Column": 57
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "wrapcheck",
      "Text": "error returned from external package is unwrapped: sig: func (github.com/Masterminds/squirrel.InsertBuilder).ToSql() (string, []interface{}, error)",
      "Severity": "error",
      "SourceLines": [
        "\t\treturn nil, err"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/adapter/storage/repository/postgres.go",
        "Offset": 1169,
        "Line": 37,
        "Column": 15
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "errorlint",
      "Text": "type assertion on error will fail on wrapped errors. Use errors.As to check for specific errors",
      "Severity": "error",
      "SourceLines": [
        "\t\tif pgErr, ok := err.(*pgconn.PgError); ok && pgErr.Code == pgerrcode.UniqueViolation {"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/adapter/storage/repository/postgres.go",
        "Offset": 1257,
        "Line": 42,
        "Column": 19
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "wrapcheck",
      "Text": "error returned from external package is unwrapped: sig: func (*github.com/jackc/pgx/v5/pgxpool.Pool).Exec(ctx context.Context, sql string, arguments ...any) (github.com/jackc/pgx/v5/pgconn.CommandTag, error)",
      "Severity": "error",
      "SourceLines": [
        "\t\treturn nil, err"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/adapter/storage/repository/postgres.go",
        "Offset": 1387,
        "Line": 45,
        "Column": 15
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "lll",
      "Text": "the line is 137 characters long, which exceeds the maximum of 120 characters.",
      "Severity": "error",
      "SourceLines": [
        "func (or *Repository) selectOrder(ctx context.Context, tx queryAble, orderID domain.OrderNumber, forUpdate bool) (*domain.Order, error) {"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/adapter/storage/repository/postgres.go",
        "Offset": 0,
        "Line": 50,
        "Column": 0
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "wrapcheck",
      "Text": "error returned from external package is unwrapped: sig: func (github.com/Masterminds/squirrel.SelectBuilder).ToSql() (string, []interface{}, error)",
      "Severity": "error",
      "SourceLines": [
        "\t\treturn nil, err"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/adapter/storage/repository/postgres.go",
        "Offset": 1854,
        "Line": 61,
        "Column": 15
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "errorlint",
      "Text": "comparing with == will fail on wrapped errors. Use errors.Is to check for a specific error",
      "Severity": "error",
      "SourceLines": [
        "\t\tif err == pgx.ErrNoRows {"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/adapter/storage/repository/postgres.go",
        "Offset": 2068,
        "Line": 75,
        "Column": 6
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "wrapcheck",
      "Text": "error returned from interface method should be wrapped: sig: func (github.com/jackc/pgx/v5.Row).Scan(dest ...any) error",
      "Severity": "error",
      "SourceLines": [
        "\t\treturn nil, err"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/adapter/storage/repository/postgres.go",
        "Offset": 2147,
        "Line": 78,
        "Column": 15
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "wrapcheck",
      "Text": "error returned from external package is unwrapped: sig: func (github.com/Masterminds/squirrel.UpdateBuilder).ToSql() (string, []interface{}, error)",
      "Severity": "error",
      "SourceLines": [
        "\t\treturn nil, err"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/adapter/storage/repository/postgres.go",
        "Offset": 2719,
        "Line": 98,
        "Column": 15
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "wrapcheck",
      "Text": "error returned from interface method should be wrapped: sig: func (github.com/MikeRez0/ypgophermart/internal/adapter/storage/repository.queryAble).Exec(ctx context.Context, sql string, arguments ...any) (github.com/jackc/pgx/v5/pgconn.CommandTag, error)",
      "Severity": "error",
      "SourceLines": [
        "\t\treturn nil, err"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/adapter/storage/repository/postgres.go",
        "Offset": 2795,
        "Line": 103,
        "Column": 15
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "wrapcheck",
      "Text": "error returned from external package is unwrapped: sig: func (github.com/Masterminds/squirrel.SelectBuilder).ToSql() (string, []interface{}, error)",
      "Severity": "error",
      "SourceLines": [
        "\t\treturn nil, err"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/adapter/storage/repository/postgres.go",
        "Offset": 3344,
        "Line": 121,
        "Column": 15
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "errorlint",
      "Text": "comparing with == will fail on wrapped errors. Use errors.Is to check for a specific error",
      "Severity": "error",
      "SourceLines": [
        "\t\tif err == pgx.ErrNoRows {"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/adapter/storage/repository/postgres.go",
        "Offset": 3419,
        "Line": 126,
        "Column": 6
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "wrapcheck",
      "Text": "error returned from external package is unwrapped: sig: func (*github.com/jackc/pgx/v5/pgxpool.Pool).Query(ctx context.Context, sql string, args ...any) (github.com/jackc/pgx/v5.Rows, error)",
      "Severity": "error",
      "SourceLines": [
        "\t\treturn nil, err"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/adapter/storage/repository/postgres.go",
        "Offset": 3498,
        "Line": 129,
        "Column": 15
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "wrapcheck",
      "Text": "error returned from interface method should be wrapped: sig: func (github.com/jackc/pgx/v5.Rows).Scan(dest ...any) error",
      "Severity": "error",
      "SourceLines": [
        "\t\t\treturn nil, err"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/adapter/storage/repository/postgres.go",
        "Offset": 3789,
        "Line": 145,
        "Column": 16
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "wrapcheck",
      "Text": "error returned from interface method should be wrapped: sig: func (github.com/jackc/pgx/v5.Rows).Err() error",
      "Severity": "error",
      "SourceLines": [
        "\t\treturn nil, err"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/adapter/storage/repository/postgres.go",
        "Offset": 3850,
        "Line": 151,
        "Column": 15
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "wrapcheck",
      "Text": "error returned from external package is unwrapped: sig: func (github.com/Masterminds/squirrel.InsertBuilder).ToSql() (string, []interface{}, error)",
      "Severity": "error",
      "SourceLines": [
        "\t\t\treturn err"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/adapter/storage/repository/postgres.go",
        "Offset": 4382,
        "Line": 170,
        "Column": 11
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "wrapcheck",
      "Text": "error returned from interface method should be wrapped: sig: func (github.com/jackc/pgx/v5.Row).Scan(dest ...any) error",
      "Severity": "error",
      "SourceLines": [
        "\t\t\treturn err"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/adapter/storage/repository/postgres.go",
        "Offset": 4475,
        "Line": 175,
        "Column": 11
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "wrapcheck",
      "Text": "error returned from external package is unwrapped: sig: func (github.com/Masterminds/squirrel.InsertBuilder).ToSql() (string, []interface{}, error)",
      "Severity": "error",
      "SourceLines": [
        "\t\t\treturn err"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/adapter/storage/repository/postgres.go",
        "Offset": 4701,
        "Line": 185,
        "Column": 11
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "wrapcheck",
      "Text": "error returned from interface method should be wrapped: sig: func (github.com/jackc/pgx/v5.Tx).Exec(ctx context.Context, sql string, arguments ...any) (commandTag github.com/jackc/pgx/v5/pgconn.CommandTag, err error)",
      "Severity": "error",
      "SourceLines": [
        "\t\t\treturn err"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/adapter/storage/repository/postgres.go",
        "Offset": 4776,
        "Line": 190,
        "Column": 11
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "errorlint",
      "Text": "type assertion on error will fail on wrapped errors. Use errors.As to check for specific errors",
      "Severity": "error",
      "SourceLines": [
        "\t\tif pgErr, ok := err.(*pgconn.PgError); ok && pgErr.Code == pgerrcode.UniqueViolation {"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/adapter/storage/repository/postgres.go",
        "Offset": 4838,
        "Line": 197,
        "Column": 19
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "wrapcheck",
      "Text": "error returned from external package is unwrapped: sig: func github.com/jackc/pgx/v5.BeginFunc(ctx context.Context, db interface{Begin(ctx context.Context) (github.com/jackc/pgx/v5.Tx, error)}, fn func(github.com/jackc/pgx/v5.Tx) error) (err error)",
      "Severity": "error",
      "SourceLines": [
        "\t\treturn nil, err"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/adapter/storage/repository/postgres.go",
        "Offset": 4968,
        "Line": 200,
        "Column": 15
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "dupl",
      "Text": "206-236 lines are duplicate of `internal/adapter/storage/repository/postgres.go:242-271`",
      "Severity": "error",
      "SourceLines": [
        "func (or *Repository) selectUser(ctx context.Context, tx queryAble, login string, forUpdate bool) (*domain.User, error) {",
        "\tstatement := or.db.QueryBuilder.",
        "\t\tSelect(\"id\", \"login\", \"password\").",
        "\t\tFrom(\"users\").",
        "\t\tWhere(sq.Eq{\"login\": login})",
        "",
        "\tif forUpdate {",
        "\t\tstatement = statement.Suffix(\"FOR UPDATE\")",
        "\t}",
        "",
        "\tsql, args, err := statement.ToSql()",
        "\tif err != nil {",
        "\t\treturn nil, err",
        "\t}",
        "",
        "\tuser := domain.User{}",
        "",
        "\terr = tx.QueryRow(ctx, sql, args...).Scan(",
        "\t\t&user.ID,",
        "\t\t&user.Login,",
        "\t\t&user.Password,",
        "\t)",
        "\tif err != nil {",
        "\t\tif err == pgx.ErrNoRows {",
        "\t\t\treturn nil, domain.ErrDataNotFound",
        "\t\t}",
        "\t\treturn nil, err",
        "\t}",
        "",
        "\treturn &user, nil",
        "}"
      ],
      "Replacement": null,
      "LineRange": {
        "From": 206,
        "To": 236
      },
      "Pos": {
        "Filename": "internal/adapter/storage/repository/postgres.go",
        "Offset": 0,
        "Line": 206,
        "Column": 0
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "wrapcheck",
      "Text": "error returned from external package is unwrapped: sig: func (github.com/Masterminds/squirrel.SelectBuilder).ToSql() (string, []interface{}, error)",
      "Severity": "error",
      "SourceLines": [
        "\t\treturn nil, err"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/adapter/storage/repository/postgres.go",
        "Offset": 5372,
        "Line": 218,
        "Column": 15
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "errorlint",
      "Text": "comparing with == will fail on wrapped errors. Use errors.Is to check for a specific error",
      "Severity": "error",
      "SourceLines": [
        "\t\tif err == pgx.ErrNoRows {"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/adapter/storage/repository/postgres.go",
        "Offset": 5518,
        "Line": 229,
        "Column": 6
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "wrapcheck",
      "Text": "error returned from interface method should be wrapped: sig: func (github.com/jackc/pgx/v5.Row).Scan(dest ...any) error",
      "Severity": "error",
      "SourceLines": [
        "\t\treturn nil, err"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/adapter/storage/repository/postgres.go",
        "Offset": 5597,
        "Line": 232,
        "Column": 15
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "dupl",
      "Text": "242-271 lines are duplicate of `internal/adapter/storage/repository/postgres.go:206-236`",
      "Severity": "error",
      "SourceLines": [
        "func (or *Repository) selectBalanceByUserID(ctx context.Context, tx queryAble, userID uint64, forUpdate bool) (*domain.Balance, error) {",
        "\tstatement := or.db.QueryBuilder.",
        "\t\tSelect(\"user_id\", \"current\", \"withdrawn\").",
        "\t\tFrom(\"balance\").",
        "\t\tWhere(sq.Eq{\"user_id\": userID})",
        "\tif forUpdate {",
        "\t\tstatement = statement.Suffix(\"FOR UPDATE\")",
        "\t}",
        "",
        "\tsql, args, err := statement.ToSql()",
        "\tif err != nil {",
        "\t\treturn nil, err",
        "\t}",
        "",
        "\tbalance := domain.Balance{}",
        "",
        "\terr = tx.QueryRow(ctx, sql, args...).Scan(",
        "\t\t&balance.UserID,",
        "\t\t&balance.Current,",
        "\t\t&balance.Withdrawn,",
        "\t)",
        "\tif err != nil {",
        "\t\tif err == pgx.ErrNoRows {",
        "\t\t\treturn nil, domain.ErrDataNotFound",
        "\t\t}",
        "\t\treturn nil, err",
        "\t}",
        "",
        "\treturn &balance, nil",
        "}"
      ],
      "Replacement": null,
      "LineRange": {
        "From": 242,
        "To": 271
      },
      "Pos": {
        "Filename": "internal/adapter/storage/repository/postgres.go",
        "Offset": 0,
        "Line": 242,
        "Column": 0
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "wrapcheck",
      "Text": "error returned from external package is unwrapped: sig: func (github.com/Masterminds/squirrel.SelectBuilder).ToSql() (string, []interface{}, error)",
      "Severity": "error",
      "SourceLines": [
        "\t\treturn nil, err"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/adapter/storage/repository/postgres.go",
        "Offset": 6181,
        "Line": 253,
        "Column": 15
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "errorlint",
      "Text": "comparing with == will fail on wrapped errors. Use errors.Is to check for a specific error",
      "Severity": "error",
      "SourceLines": [
        "\t\tif err == pgx.ErrNoRows {"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/adapter/storage/repository/postgres.go",
        "Offset": 6349,
        "Line": 264,
        "Column": 6
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "wrapcheck",
      "Text": "error returned from interface method should be wrapped: sig: func (github.com/jackc/pgx/v5.Row).Scan(dest ...any) error",
      "Severity": "error",
      "SourceLines": [
        "\t\treturn nil, err"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/adapter/storage/repository/postgres.go",
        "Offset": 6428,
        "Line": 267,
        "Column": 15
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "wrapcheck",
      "Text": "error returned from external package is unwrapped: sig: func (github.com/Masterminds/squirrel.UpdateBuilder).ToSql() (string, []interface{}, error)",
      "Severity": "error",
      "SourceLines": [
        "\t\t\treturn err"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/adapter/storage/repository/postgres.go",
        "Offset": 7456,
        "Line": 307,
        "Column": 11
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "wrapcheck",
      "Text": "error returned from interface method should be wrapped: sig: func (github.com/jackc/pgx/v5.Tx).Exec(ctx context.Context, sql string, arguments ...any) (commandTag github.com/jackc/pgx/v5/pgconn.CommandTag, err error)",
      "Severity": "error",
      "SourceLines": [
        "\t\t\treturn err"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/adapter/storage/repository/postgres.go",
        "Offset": 7531,
        "Line": 312,
        "Column": 11
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "wrapcheck",
      "Text": "error returned from external package is unwrapped: sig: func github.com/jackc/pgx/v5.BeginFunc(ctx context.Context, db interface{Begin(ctx context.Context) (github.com/jackc/pgx/v5.Tx, error)}, fn func(github.com/jackc/pgx/v5.Tx) error) (err error)",
      "Severity": "error",
      "SourceLines": [
        "\t\treturn nil, err"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/adapter/storage/repository/postgres.go",
        "Offset": 7588,
        "Line": 318,
        "Column": 15
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "govet",
      "Text": "fieldalignment: struct with 96 pointer bytes could be 48",
      "Severity": "error",
      "SourceLines": [
        "type Order struct {"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/core/domain/order.go",
        "Offset": 329,
        "Line": 20,
        "Column": 12
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "govet",
      "Text": "fieldalignment: struct with 48 pointer bytes could be 32",
      "Severity": "error",
      "SourceLines": [
        "type User struct {"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/core/domain/user.go",
        "Offset": 26,
        "Line": 3,
        "Column": 11
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "wrapcheck",
      "Text": "error returned from interface method should be wrapped: sig: func (github.com/MikeRez0/ypgophermart/internal/core/port.Repository).ReadOrder(ctx context.Context, orderID github.com/MikeRez0/ypgophermart/internal/core/domain.OrderNumber) (*github.com/MikeRez0/ypgophermart/internal/core/domain.Order, error)",
      "Severity": "error",
      "SourceLines": [
        "\t\treturn nil, err"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/core/service/service.go",
        "Offset": 2424,
        "Line": 94,
        "Column": 15
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "wrapcheck",
      "Text": "error returned from interface method should be wrapped: sig: func (github.com/MikeRez0/ypgophermart/internal/core/port.Repository).CreateOrder(ctx context.Context, order *github.com/MikeRez0/ypgophermart/internal/core/domain.Order) (*github.com/MikeRez0/ypgophermart/internal/core/domain.Order, error)",
      "Severity": "error",
      "SourceLines": [
        "\t\treturn nil, err"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/core/service/service.go",
        "Offset": 2968,
        "Line": 115,
        "Column": 15
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "wrapcheck",
      "Text": "error returned from interface method should be wrapped: sig: func (github.com/MikeRez0/ypgophermart/internal/core/port.Repository).ListOrdersByUser(ctx context.Context, userID uint64) ([]*github.com/MikeRez0/ypgophermart/internal/core/domain.Order, error)",
      "Severity": "error",
      "SourceLines": [
        "\t\treturn nil, err"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/core/service/service.go",
        "Offset": 3314,
        "Line": 128,
        "Column": 15
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "wrapcheck",
      "Text": "error returned from interface method should be wrapped: sig: func (github.com/MikeRez0/ypgophermart/internal/core/port.Repository).ReadOrder(ctx context.Context, orderID github.com/MikeRez0/ypgophermart/internal/core/domain.OrderNumber) (*github.com/MikeRez0/ypgophermart/internal/core/domain.Order, error)",
      "Severity": "error",
      "SourceLines": [
        "\t\treturn nil, err"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/core/service/service.go",
        "Offset": 3817,
        "Line": 149,
        "Column": 15
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "wrapcheck",
      "Text": "error returned from interface method should be wrapped: sig: func (github.com/MikeRez0/ypgophermart/internal/core/port.Repository).UpdateUserBalanceByOrder(ctx context.Context, userID uint64, orderNumber github.com/MikeRez0/ypgophermart/internal/core/domain.OrderNumber, updateFn github.com/MikeRez0/ypgophermart/internal/core/port.UpdateBalanceFn) (*github.com/MikeRez0/ypgophermart/internal/core/domain.Balance, error)",
      "Severity": "error",
      "SourceLines": [
        "\t\treturn nil, err"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/core/service/service.go",
        "Offset": 4203,
        "Line": 165,
        "Column": 15
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "wrapcheck",
      "Text": "error returned from interface method should be wrapped: sig: func (github.com/MikeRez0/ypgophermart/internal/core/port.Repository).ReadOrder(ctx context.Context, orderID github.com/MikeRez0/ypgophermart/internal/core/domain.OrderNumber) (*github.com/MikeRez0/ypgophermart/internal/core/domain.Order, error)",
      "Severity": "error",
      "SourceLines": [
        "\t\treturn nil, err"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/core/service/service.go",
        "Offset": 4550,
        "Line": 180,
        "Column": 15
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "wrapcheck",
      "Text": "error returned from interface method should be wrapped: sig: func (github.com/MikeRez0/ypgophermart/internal/core/port.Repository).UpdateUserBalanceByOrder(ctx context.Context, userID uint64, orderNumber github.com/MikeRez0/ypgophermart/internal/core/domain.OrderNumber, updateFn github.com/MikeRez0/ypgophermart/internal/core/port.UpdateBalanceFn) (*github.com/MikeRez0/ypgophermart/internal/core/domain.Balance, error)",
      "Severity": "error",
      "SourceLines": [
        "\t\treturn nil, err"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/core/service/service.go",
        "Offset": 5218,
        "Line": 209,
        "Column": 15
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "wrapcheck",
      "Text": "error returned from interface method should be wrapped: sig: func (github.com/MikeRez0/ypgophermart/internal/core/port.Repository).ReadOrder(ctx context.Context, orderID github.com/MikeRez0/ypgophermart/internal/core/domain.OrderNumber) (*github.com/MikeRez0/ypgophermart/internal/core/domain.Order, error)",
      "Severity": "error",
      "SourceLines": [
        "\t\treturn err"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/core/service/service.go",
        "Offset": 5438,
        "Line": 218,
        "Column": 10
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "wrapcheck",
      "Text": "error returned from interface method should be wrapped: sig: func (github.com/MikeRez0/ypgophermart/internal/core/port.Repository).ReadOrder(ctx context.Context, orderID github.com/MikeRez0/ypgophermart/internal/core/domain.OrderNumber) (*github.com/MikeRez0/ypgophermart/internal/core/domain.Order, error)",
      "Severity": "error",
      "SourceLines": [
        "\t\treturn err"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/core/service/service.go",
        "Offset": 5711,
        "Line": 229,
        "Column": 10
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "wrapcheck",
      "Text": "error returned from interface method should be wrapped: sig: func (github.com/MikeRez0/ypgophermart/internal/core/port.Repository).UpdateOrder(ctx context.Context, order *github.com/MikeRez0/ypgophermart/internal/core/domain.Order) (*github.com/MikeRez0/ypgophermart/internal/core/domain.Order, error)",
      "Severity": "error",
      "SourceLines": [
        "\treturn err"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/core/service/service.go",
        "Offset": 5866,
        "Line": 240,
        "Column": 9
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "dupl",
      "Text": "64-79 lines are duplicate of `internal/core/service/service_test.go:228-243`",
      "Severity": "error",
      "SourceLines": [
        "\tfor _, test := range tests {",
        "\t\tt.Run(test.name, func(t *testing.T) {",
        "\t\t\trepo := mock.NewMockRepository(mockCtrl)",
        "\t\t\tts := mock.NewMockTokenService(mockCtrl)",
        "\t\t\taccrual := mock.NewMockAccrualServiceClient(mockCtrl)",
        "\t\t\ttest.mock(repo, accrual)",
        "",
        "\t\t\ts, err := service.NewService(repo, ts, accrual, logger)",
        "\t\t\tassert.NoError(t, err)",
        "",
        "\t\t\tresult, err := s.RegisterUser(context.Background(), &test.user)",
        "",
        "\t\t\tassert.Equal(t, test.expResult, result)",
        "\t\t\tassert.Equal(t, test.expError, err)",
        "\t\t})",
        "\t}"
      ],
      "Replacement": null,
      "LineRange": {
        "From": 64,
        "To": 79
      },
      "Pos": {
        "Filename": "internal/core/service/service_test.go",
        "Offset": 0,
        "Line": 64,
        "Column": 0
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "dupl",
      "Text": "228-243 lines are duplicate of `internal/core/service/service_test.go:64-79`",
      "Severity": "error",
      "SourceLines": [
        "\tfor _, test := range tests {",
        "\t\tt.Run(test.name, func(t *testing.T) {",
        "\t\t\trepo := mock.NewMockRepository(mockCtrl)",
        "\t\t\tts := mock.NewMockTokenService(mockCtrl)",
        "\t\t\taccrual := mock.NewMockAccrualServiceClient(mockCtrl)",
        "\t\t\ttest.mock(repo, accrual)",
        "",
        "\t\t\ts, err := service.NewService(repo, ts, accrual, logger)",
        "\t\t\tassert.NoError(t, err)",
        "",
        "\t\t\tresult, err := s.CreateOrder(context.Background(), &test.order)",
        "",
        "\t\t\tassert.Equal(t, test.expResult, result)",
        "\t\t\tassert.Equal(t, test.expError, err)",
        "\t\t})",
        "\t}"
      ],
      "Replacement": null,
      "LineRange": {
        "From": 228,
        "To": 243
      },
      "Pos": {
        "Filename": "internal/core/service/service_test.go",
        "Offset": 0,
        "Line": 228,
        "Column": 0
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "gocritic",
      "Text": "assignOp: replace `d = d - asciiZero` with `d -= asciiZero`",
      "Severity": "error",
      "SourceLines": [
        "\t\td = d - asciiZero"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/core/utils/luhn.go",
        "Offset": 556,
        "Line": 32,
        "Column": 3
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "godot",
      "Text": "Comment should end in a period",
      "Severity": "error",
      "SourceLines": [
        "// HashPassword hashes input password using bcrypt"
      ],
      "Replacement": {
        "NeedOnlyDelete": false,
        "NewLines": [
          "// HashPassword hashes input password using bcrypt."
        ],
        "Inline": null
      },
      "Pos": {
        "Filename": "internal/core/utils/password.go",
        "Offset": 52,
        "Line": 5,
        "Column": 51
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "wrapcheck",
      "Text": "error returned from external package is unwrapped: sig: func golang.org/x/crypto/bcrypt.GenerateFromPassword(password []byte, cost int) ([]byte, error)",
      "Severity": "error",
      "SourceLines": [
        "\t\treturn \"\", err"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/core/utils/password.go",
        "Offset": 276,
        "Line": 9,
        "Column": 14
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "godot",
      "Text": "Comment should end in a period",
      "Severity": "error",
      "SourceLines": [
        "// ComparePassword compares input password with hashed password"
      ],
      "Replacement": {
        "NeedOnlyDelete": false,
        "NewLines": [
          "// ComparePassword compares input password with hashed password."
        ],
        "Inline": null
      },
      "Pos": {
        "Filename": "internal/core/utils/password.go",
        "Offset": 323,
        "Line": 15,
        "Column": 64
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "wrapcheck",
      "Text": "error returned from external package is unwrapped: sig: func golang.org/x/crypto/bcrypt.CompareHashAndPassword(hashedPassword []byte, password []byte) error",
      "Severity": "error",
      "SourceLines": [
        "\treturn bcrypt.CompareHashAndPassword([]byte(hashedPassword), []byte(password))"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/core/utils/password.go",
        "Offset": 457,
        "Line": 17,
        "Column": 9
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "wrapcheck",
      "Text": "error returned from external package is unwrapped: sig: func github.com/MikeRez0/ypgophermart/internal/adapter/storage.NewDBStorage(ctx context.Context, config *github.com/MikeRez0/ypgophermart/internal/adapter/config.Database) (*github.com/MikeRez0/ypgophermart/internal/adapter/storage.DB, error)",
      "Severity": "error",
      "SourceLines": [
        "\t\treturn nil, nil, err"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/e2etest/servicedb_test.go",
        "Offset": 1218,
        "Line": 50,
        "Column": 20
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "wrapcheck",
      "Text": "error returned from external package is unwrapped: sig: func (*github.com/MikeRez0/ypgophermart/internal/adapter/storage.DB).RunMigrations() error",
      "Severity": "error",
      "SourceLines": [
        "\t\treturn nil, nil, err"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/e2etest/servicedb_test.go",
        "Offset": 1287,
        "Line": 54,
        "Column": 20
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "wrapcheck",
      "Text": "error returned from external package is unwrapped: sig: func github.com/MikeRez0/ypgophermart/internal/adapter/storage/repository.NewRepository(db *github.com/MikeRez0/ypgophermart/internal/adapter/storage.DB) (*github.com/MikeRez0/ypgophermart/internal/adapter/storage/repository.Repository, error)",
      "Severity": "error",
      "SourceLines": [
        "\t\treturn nil, nil, err"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/e2etest/servicedb_test.go",
        "Offset": 1373,
        "Line": 58,
        "Column": 20
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "wrapcheck",
      "Text": "error returned from external package is unwrapped: sig: func github.com/MikeRez0/ypgophermart/internal/adapter/auth.New() (github.com/MikeRez0/ypgophermart/internal/core/port.TokenService, error)",
      "Severity": "error",
      "SourceLines": [
        "\t\treturn nil, nil, err"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/e2etest/servicedb_test.go",
        "Offset": 1439,
        "Line": 62,
        "Column": 20
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "errcheck",
      "Text": "Error return value of `s.RegisterUser` is not checked",
      "Severity": "error",
      "SourceLines": [
        "\t\t\t\ts.RegisterUser(context.Background(), &test.user)"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/e2etest/servicedb_test.go",
        "Offset": 3780,
        "Line": 166,
        "Column": 19
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "unused",
      "Text": "field `expResult` is unused",
      "Severity": "error",
      "SourceLines": [
        "\t\texpResult domain.Order"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/e2etest/servicedb_test.go",
        "Offset": 4340,
        "Line": 191,
        "Column": 3
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    },
    {
      "FromLinter": "unused",
      "Text": "field `mock` is unused",
      "Severity": "error",
      "SourceLines": [
        "\t\tmock        func(as *mock.MockAccrualServiceClient)"
      ],
      "Replacement": null,
      "Pos": {
        "Filename": "internal/e2etest/servicedb_test.go",
        "Offset": 6212,
        "Line": 262,
        "Column": 3
      },
      "ExpectNoLint": false,
      "ExpectedNoLintLinter": ""
    }
  ],
  "Report": {
    "Linters": [
      {
        "Name": "asasalint",
        "Enabled": true
      },
      {
        "Name": "asciicheck",
        "Enabled": true
      },
      {
        "Name": "bidichk",
        "Enabled": true
      },
      {
        "Name": "bodyclose",
        "Enabled": true
      },
      {
        "Name": "canonicalheader"
      },
      {
        "Name": "containedctx",
        "Enabled": true
      },
      {
        "Name": "contextcheck"
      },
      {
        "Name": "copyloopvar"
      },
      {
        "Name": "cyclop"
      },
      {
        "Name": "decorder"
      },
      {
        "Name": "deadcode"
      },
      {
        "Name": "depguard"
      },
      {
        "Name": "dogsled"
      },
      {
        "Name": "dupl",
        "Enabled": true
      },
      {
        "Name": "dupword",
        "Enabled": true
      },
      {
        "Name": "durationcheck",
        "Enabled": true
      },
      {
        "Name": "errcheck",
        "Enabled": true,
        "EnabledByDefault": true
      },
      {
        "Name": "errchkjson"
      },
      {
        "Name": "errname",
        "Enabled": true
      },
      {
        "Name": "errorlint",
        "Enabled": true
      },
      {
        "Name": "execinquery"
      },
      {
        "Name": "exhaustive",
        "Enabled": true
      },
      {
        "Name": "exhaustivestruct"
      },
      {
        "Name": "exhaustruct"
      },
      {
        "Name": "exportloopref"
      },
      {
        "Name": "forbidigo"
      },
      {
        "Name": "forcetypeassert",
        "Enabled": true
      },
      {
        "Name": "fatcontext"
      },
      {
        "Name": "funlen"
      },
      {
        "Name": "gci"
      },
      {
        "Name": "ginkgolinter"
      },
      {
        "Name": "gocheckcompilerdirectives",
        "Enabled": true
      },
      {
        "Name": "gochecknoglobals"
      },
      {
        "Name": "gochecknoinits"
      },
      {
        "Name": "gochecksumtype"
      },
      {
        "Name": "gocognit"
      },
      {
        "Name": "goconst",
        "Enabled": true
      },
      {
        "Name": "gocritic",
        "Enabled": true
      },
      {
        "Name": "gocyclo"
      },
      {
        "Name": "godot",
        "Enabled": true
      },
      {
        "Name": "godox"
      },
      {
        "Name": "err113"
      },
      {
        "Name": "gofmt",
        "Enabled": true
      },
      {
        "Name": "gofumpt"
      },
      {
        "Name": "goheader"
      },
      {
        "Name": "goimports",
        "Enabled": true
      },
      {
        "Name": "golint"
      },
      {
        "Name": "mnd"
      },
      {
        "Name": "gomnd"
      },
      {
        "Name": "gomoddirectives"
      },
      {
        "Name": "gomodguard"
      },
      {
        "Name": "goprintffuncname",
        "Enabled": true
      },
      {
        "Name": "gosec",
        "Enabled": true
      },
      {
        "Name": "gosimple",
        "Enabled": true,
        "EnabledByDefault": true
      },
      {
        "Name": "gosmopolitan"
      },
      {
        "Name": "govet",
        "Enabled": true,
        "EnabledByDefault": true
      },
      {
        "Name": "grouper",
        "Enabled": true
      },
      {
        "Name": "ifshort"
      },
      {
        "Name": "iface"
      },
      {
        "Name": "importas"
      },
      {
        "Name": "inamedparam"
      },
      {
        "Name": "ineffassign",
        "Enabled": true,
        "EnabledByDefault": true
      },
      {
        "Name": "interfacebloat"
      },
      {
        "Name": "interfacer"
      },
      {
        "Name": "intrange",
        "Enabled": true
      },
      {
        "Name": "ireturn"
      },
      {
        "Name": "lll",
        "Enabled": true
      },
      {
        "Name": "loggercheck",
        "Enabled": true
      },
      {
        "Name": "maintidx"
      },
      {
        "Name": "makezero",
        "Enabled": true
      },
      {
        "Name": "maligned"
      },
      {
        "Name": "mirror",
        "Enabled": true
      },
      {
        "Name": "misspell"
      },
      {
        "Name": "musttag",
        "Enabled": true
      },
      {
        "Name": "nakedret"
      },
      {
        "Name": "nestif"
      },
      {
        "Name": "nilerr",
        "Enabled": true
      },
      {
        "Name": "nilnil",
        "Enabled": true
      },
      {
        "Name": "nlreturn"
      },
      {
        "Name": "noctx"
      },
      {
        "Name": "nonamedreturns"
      },
      {
        "Name": "nosnakecase"
      },
      {
        "Name": "nosprintfhostport",
        "Enabled": true
      },
      {
        "Name": "paralleltest"
      },
      {
        "Name": "perfsprint",
        "Enabled": true
      },
      {
        "Name": "prealloc",
        "Enabled": true
      },
      {
        "Name": "predeclared",
        "Enabled": true
      },
      {
        "Name": "promlinter"
      },
      {
        "Name": "protogetter",
        "Enabled": true
      },
      {
        "Name": "reassign",
        "Enabled": true
      },
      {
        "Name": "recvcheck"
      },
      {
        "Name": "revive",
        "Enabled": true
      },
      {
        "Name": "rowserrcheck",
        "Enabled": true
      },
      {
        "Name": "sloglint",
        "Enabled": true
      },
      {
        "Name": "scopelint"
      },
      {
        "Name": "sqlclosecheck",
        "Enabled": true
      },
      {
        "Name": "spancheck"
      },
      {
        "Name": "staticcheck",
        "Enabled": true,
        "EnabledByDefault": true
      },
      {
        "Name": "structcheck"
      },
      {
        "Name": "stylecheck",
        "Enabled": true
      },
      {
        "Name": "tagalign"
      },
      {
        "Name": "tagliatelle"
      },
      {
        "Name": "tenv",
        "Enabled": true
      },
      {
        "Name": "testableexamples",
        "Enabled": true
      },
      {
        "Name": "testifylint"
      },
      {
        "Name": "testpackage"
      },
      {
        "Name": "thelper",
        "Enabled": true
      },
      {
        "Name": "tparallel",
        "Enabled": true
      },
      {
        "Name": "typecheck",
        "Enabled": true,
        "EnabledByDefault": true
      },
      {
        "Name": "unconvert",
        "Enabled": true
      },
      {
        "Name": "unparam",
        "Enabled": true
      },
      {
        "Name": "unused",
        "Enabled": true,
        "EnabledByDefault": true
      },
      {
        "Name": "usestdlibvars",
        "Enabled": true
      },
      {
        "Name": "varcheck"
      },
      {
        "Name": "varnamelen"
      },
      {
        "Name": "wastedassign",
        "Enabled": true
      },
      {
        "Name": "whitespace",
        "Enabled": true
      },
      {
        "Name": "wrapcheck",
        "Enabled": true
      },
      {
        "Name": "wsl"
      },
      {
        "Name": "zerologlint",
        "Enabled": true
      },
      {
        "Name": "nolintlint",
        "Enabled": true
      }
    ]
  }
}
